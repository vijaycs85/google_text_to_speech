<?php
/**
 * @author Karthikeyan Manivasagam
 * @author Karthikeyan Manivasagam <karthikeyanm.inbox@gmail.com>
 * @file
 * Contains \Drupal\google_text_to_speech\Service\BaseService.
 */
namespace Drupal\google_text_to_speech\Service;

use Google\Cloud\TextToSpeech\V1\AudioConfig;
use Google\Cloud\TextToSpeech\V1\AudioEncoding;
use Google\Cloud\TextToSpeech\V1\SynthesisInput;
use Google\Cloud\TextToSpeech\V1\TextToSpeechClient;
use Google\Cloud\TextToSpeech\V1\VoiceSelectionParams;
use Google\Cloud\TextToSpeech\V1\SsmlVoiceGender;
use \Drupal\Core\Config\ConfigFactoryInterface;
use \Drupal\Core\Entity\EntityInterface;
use \Drupal\Core\Entity\FieldableEntityInterface;
use \Drupal\Core\Entity\Entity\EntityViewDisplay;
use \Drupal\media\MediaInterface;
use \Drupal\file\Entity\File;
use \Drupal\media\Entity\Media;
/**
 * Contains the TextToSpeech.
 */
class TextToSpeech  {
	
    public $config;
    protected $client;

/**
 * Creates a config of google_text_to_speech.settings.
 *
 * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
 *   The config factory.
 */
public function __construct(ConfigFactoryInterface $config_factory) {
  $this->config = $config_factory->get('google_text_to_speech.settings');
  $this->client = new TextToSpeechClient(['credentials' => $this->config->get('google_text_to_speech_json_path')]);

}

 public function getAudio($parameters) {
    $ptext = isset($parameters['text']) && trim($parameters['text']) != "" ? $parameters['text'] : 'Sample Audio has been generated by google text to speech';
    $planguage = isset($parameters['language_code']) ? $parameters['language_code'] : 'en-US';
    $pvoice = isset($parameters['voice']) ? $parameters['voice'] : 1;
    $pencoding = isset($parameters['encoding']) ? $parameters['encoding'] : 2;

    $input = new SynthesisInput();
    $input->setText($ptext);
    $voice = new VoiceSelectionParams();
    $voice->setLanguageCode($planguage);
    $voice->setSsmlGender($pvoice);
    $audioConfig = new AudioConfig();
    $audioConfig->setAudioEncoding($pencoding);
    $resp = $this->client->synthesizeSpeech($input, $voice, $audioConfig);
    $file =  $resp->getAudioContent();
    return $file;
 }

 public function downloadAudio($parameters = []) {
    $parameters['encoding'] = isset($parameters['encoding']) ? $parameters['encoding'] : 2;
    $audio = $this->getAudio($parameters);
    $file_size = strlen($audio);
    header('Content-Description: File Transfer');
    header('Content-Type: audio/mpeg');
    $encoding = [1 => 'mp3', 3 => 'wav', 2 => 'mp3'];
    header('Content-Disposition: attachment; filename="test.'.$encoding[$parameters['encoding']].'"');
    header('Expires: 0');
    header('Cache-Control: must-revalidate');
    header('Pragma: public');
    header('Content-Length: ' . $file_size);
    flush();
    echo($audio);
 }


  /**
   * Check if entity field content has changed
   * @param  ParagraphInterface $entity     The entity being saved
   * @return array                    A list of changed field names
   */
  public function entityHasChanged(MediaInterface $entity) {
    $changed_fields = [];
    if (!$entity->original) {
      return $changed_fields;
    }
    $field_names = $this->getFieldList($entity->bundle(), $entity->getEntityTypeId());
    foreach($field_names as $key => $field_name) {
      if($entity->hasField($field_name) && $field_name != 'field_comments' && !$entity->get($field_name)->equals($entity->original->get($field_name))){
        $changed_fields[] = $field_name;
        // $entity->get($field_name)->getValue();
      }
    }
     return $changed_fields;
  }


  /**
   * Get list of field names from bundle
   * @param  string $bundle Bundle name
   * @return array         Array of field names
   */
  public function getFieldList($bundle, $entity_type_id) {
    $fields_by_weight = [];
    $bundle_fields = \Drupal::entityTypeManager()
      ->getStorage('entity_view_display')
      ->load($entity_type_id . '.' . $bundle . '.' . 'default')
      ->getComponents();

    foreach ($bundle_fields as $name => $options) {
      $fields_by_weight[] = $name;
    }
    return $fields_by_weight;
  }

  public function generateFile($parameters) {
   $encoding = [1 => 'mp3', 3 => 'wav', 2 => 'mp3'];
   $content = $this->getAudio($parameters);
    $fileExt = $encoding[$parameters['encoding']];
    $month = date('m');
    $year = date('Y');
    $folder = $year."-".$month;
    $random = rand(10, 999);
    $user_id = \Drupal::currentUser()->id();
    $path = 'gtts/'.$folder."/GTTS_".$random."_".$user_id."_".time().".".$fileExt;

    $file = File::create([
    'uid' => 1,
    'filename' => basename($path),
    'uri' => 'public://'.$path,
    'status' => 1,
    ]);
    $file->save();

    $dir = dirname($file->getFileUri());
    if (!file_exists($dir)) {
      mkdir($dir, 0770, TRUE);
    }
    file_put_contents($file->getFileUri(), $content);
    //$this->saveFiletoMedia($file,$parameters);
    return $file;
  }

 /* public function saveFiletoMedia($file, $parameters) {
    if($this->config->get('google_text_to_speech_media') == TRUE) {
      $name = substr($parameters['text'],0,60);
      $media = Media::create([
        'bundle'           => 'google_text_to_speech',
        'uid'              => \Drupal::currentUser()->id(),
        'field_media_audio_file' => [
          'target_id' => $file->id(),
        ],
      ]);
      $media->setName($name)->setPublished(TRUE)->save();
    }
  }*/
}